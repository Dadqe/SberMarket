# type: ignore[var-annotated]
"""Example of code."""
from pprint import pprint
import json
import sys
import os

# sys.path.insert(0, "/sbermarket-api") # Variant 1
# from sbermarket_api.client import Client # Variant 1

sys.path.insert(1, os.getcwd()) # Variant 2
from sbermarket_api.client import Client # Variant 2

if __name__ == "__main__":
    client = Client()                                       # Создаю Объект класса Client, что б использовать его методы
    # Получить все магазины доступные для данной точки.
    stores = client.stores(lat=54.92046, lon=73.469722)    # -> list элементами этого списка являются объекты класса Store
    # Использую метод Client.stores, передаю в него широту и долготу
    # Посмотреть, какие магазины программа нашла для данной точки. Возвращается 8 магазинов, прям как на сайте
    first_shop = stores[0] # Выберу пока для удобства первый магазин, это будет METRO в этой переменной лежит объект класса Store оттуда мне надо будет вытащить только store_id, что б передать в следующий запрос этот айди и получить категории в скидках, там уже есть сформированный запрос(ссылка), либо глянуть, что может здешний метод и что я буду получать.
    # print(first_shop.store_id) # Выведу store_id id магазина в системе Sbermarket
    
    stores_dict = {}
    for store in stores:
        stores_dict[store.name] = store.store_id
    
    with open(r'E:\SberMarket\mywork\Data\all_stores_for_me.json', 'w', encoding='utf-8') as file:
        json.dump(stores_dict, file, indent=4, ensure_ascii=False)

    # Получу всю информацию о имеющихся категориях в данном магазине.
    # Там в конце длиннющего списка будет вложенность с другими списками/словарями с наименованием promoted_categories. Дальше я её там получу.
    # Она тоже длинная, там хранятся просто скидки и скидки до 60%. Поработаю пока со скидками 60% далее выполню команду для получения именно этого
    # categories = first_shop.categories() # Получаю все категории
    # only_discount_category = categories['promoted_categories'][0] # -> dict Вытаскиваю словарь только с обычными скидками (т.к. в первой вложенности есть ещё скидки до 60%)
    # pprint(only_sales_category) # Для более наглядного отображения данных и удобной работы с выдаваемым результатом
    
    # Попробую преобразовать в json что б можно было разочек пройтись по категориям магазина, после чего сохранить все категории в скидках и через них вытаскивать уже ссылки для запросов по каждой отдельной категории, ссылки браться будут из локального файлика, что б постоянно не засорять запросами
    # Тут надо будет проверять, существует ли уже такой товар. Можно вообще эти скидки ещё в каждый отдельный магазин закидывать. Формировать имя тип из имени магазина + его айди, например, и через библиотеку path проверять на это. Тип если есть уже такой файл, то уже внутри этого файла надо взять нужную ссылку или как.
    # Короче, если нет такого файла, то надо получить такой файл, потом распарсить его, получить ссылки в виде пар имя категории: ссылка на запрос по этой категории
    # после чего в этом новом файле я буду брать нужное значение по необходимой категории и распарсивать в таком же принципе
    # Посмотреть ещё как работать с этим json файлом, как его распарсивать. Что-то похожее есть у Python_Today, мб бот на шмотки в csgo посмотреть что-нибудь там
    # with open('E:\SberMarket\examples\Data\only_discount_category.json', 'w', encoding='utf-8') as file:
    #     json.dump(only_discount_category, file, indent=4, ensure_ascii=False)



# Попробовать сформить request-запрос в отдельном скрипте и посмотреть, смогу ли я сам самостоятельно получить результат тот же https://sbermarket.ru/api/stores/152/categories вот по такому адресу и захвать хедерсы с собой. Т.к., переходя по такой ссылки, мне возвращает 404. Хочется понять, как это скрипт пробивается через это всё